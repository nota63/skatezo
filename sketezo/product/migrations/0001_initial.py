# Generated by Django 5.1.6 on 2025-07-22 05:25

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/')),
                ('description', models.TextField(blank=True)),
                ('website_url', models.URLField(blank=True, help_text="Brand's official website")),
                ('is_featured', models.BooleanField(default=False, help_text='Feature on homepage')),
                ('is_active', models.BooleanField(default=True)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('established_year', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('hex_code', models.CharField(help_text='Color hex code (e.g., #FF5733)', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('care_instructions', models.TextField(blank=True)),
                ('is_eco_friendly', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ProductAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=100)),
                ('is_required', models.BooleanField(default=False)),
                ('is_filterable', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly name', unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description for SEO')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Display order')),
                ('meta_title', models.CharField(blank=True, help_text='SEO meta title', max_length=60)),
                ('meta_description', models.CharField(blank=True, help_text='SEO meta description', max_length=160)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent category for hierarchical structure', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='product.category')),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(unique=True)),
                ('sku', models.CharField(help_text='Stock Keeping Unit', max_length=50, unique=True)),
                ('description', models.TextField(help_text='Main product description')),
                ('short_description', models.TextField(blank=True, help_text='Brief description for listings', max_length=500)),
                ('features', models.TextField(blank=True, help_text='Key features and benefits')),
                ('care_instructions', models.TextField(blank=True)),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discounted_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, help_text='Cost for profit calculation', max_digits=10, null=True)),
                ('gender', models.CharField(choices=[('men', 'Men'), ('women', 'Women'), ('unisex', 'Unisex'), ('kids', 'Kids')], max_length=10)),
                ('season', models.CharField(blank=True, help_text='Summer, Winter, All Season, etc.', max_length=20)),
                ('occasion', models.CharField(blank=True, help_text='Casual, Formal, Party, etc.', max_length=100)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('out_of_stock', 'Out of Stock'), ('discontinued', 'Discontinued')], default='active', max_length=20)),
                ('is_featured', models.BooleanField(default=False, help_text='Feature on homepage')),
                ('is_new_arrival', models.BooleanField(default=False)),
                ('is_bestseller', models.BooleanField(default=False)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in grams', max_digits=8, null=True)),
                ('dimensions', models.CharField(blank=True, help_text='L x W x H in cm', max_length=100)),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for search', max_length=500)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('purchase_count', models.PositiveIntegerField(default=0)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='product.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='product.category')),
                ('materials', models.ManyToManyField(blank=True, to='product.material')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='collections/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('meta_title', models.CharField(blank=True, max_length=60)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('products', models.ManyToManyField(blank=True, related_name='collections', to='product.product')),
            ],
            options={
                'ordering': ['sort_order', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=200)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='product.productattribute')),
            ],
            options={
                'ordering': ['sort_order', 'value'],
            },
        ),
        migrations.CreateModel(
            name='ProductAttributeMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attribute_mappings', to='product.product')),
                ('attribute_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.productattributevalue')),
            ],
        ),
        migrations.CreateModel(
            name='ProductGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='products/gallery/')),
                ('alt_text', models.CharField(blank=True, help_text='Alt text for SEO and accessibility', max_length=255)),
                ('is_primary', models.BooleanField(default=False, help_text='Primary product image')),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('color', models.ForeignKey(blank=True, help_text='Color-specific image', null=True, on_delete=django.db.models.deletion.SET_NULL, to='product.color')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gallery', to='product.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['sort_order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ProductQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('question', models.TextField()),
                ('answer', models.TextField(blank=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('answered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answered_questions', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='product.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sku', models.CharField(help_text='Variant-specific SKU', max_length=50, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discounted_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('stock', models.PositiveIntegerField(default=0)),
                ('reserved_stock', models.PositiveIntegerField(default=0, help_text='Stock reserved in pending orders')),
                ('low_stock_threshold', models.PositiveIntegerField(default=5)),
                ('image', models.ImageField(blank=True, null=True, upload_to='products/variants/')),
                ('is_active', models.BooleanField(default=True)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.color')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='product.product')),
            ],
            options={
                'ordering': ['color__sort_order', 'size__sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ProductReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('review_text', models.TextField()),
                ('is_verified_purchase', models.BooleanField(default=False, help_text='Customer bought this product')),
                ('is_approved', models.BooleanField(default=True)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('not_helpful_count', models.PositiveIntegerField(default=0)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='product.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('variant', models.ForeignKey(blank=True, help_text='Specific variant reviewed', null=True, on_delete=django.db.models.deletion.SET_NULL, to='product.productvariant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecentlyViewed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recently_viewed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('category', models.CharField(choices=[('clothing', 'Clothing'), ('shoes', 'Shoes'), ('accessories', 'Accessories')], default='clothing', max_length=20)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('chest', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('waist', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('hip', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('length', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
            ],
            options={
                'ordering': ['category', 'sort_order'],
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.AddField(
            model_name='productvariant',
            name='size',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.size'),
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('movement_type', models.CharField(choices=[('in', 'Stock In'), ('out', 'Stock Out'), ('adjustment', 'Adjustment'), ('reserved', 'Reserved'), ('released', 'Released')], max_length=20)),
                ('reason', models.CharField(choices=[('purchase', 'Purchase'), ('sale', 'Sale'), ('return', 'Return'), ('damage', 'Damage'), ('lost', 'Lost'), ('adjustment', 'Stock Adjustment'), ('reservation', 'Order Reservation'), ('cancellation', 'Order Cancellation')], max_length=20)),
                ('quantity', models.IntegerField()),
                ('reference_id', models.CharField(blank=True, help_text='Order ID, Invoice ID, etc.', max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='product.productvariant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Wishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to='product.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to=settings.AUTH_USER_MODEL)),
                ('variant', models.ForeignKey(blank=True, help_text='Specific variant wishlisted', null=True, on_delete=django.db.models.deletion.CASCADE, to='product.productvariant')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'category'], name='product_pro_status_9f3822_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['brand', 'status'], name='product_pro_brand_i_0ef5d0_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-created_at'], name='product_pro_created_22b186_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productattributevalue',
            unique_together={('attribute', 'value')},
        ),
        migrations.AlterUniqueTogether(
            name='productattributemapping',
            unique_together={('product', 'attribute_value')},
        ),
        migrations.AlterUniqueTogether(
            name='productreview',
            unique_together={('product', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='recentlyviewed',
            unique_together={('user', 'product')},
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['product', 'is_active'], name='product_pro_product_2c49be_idx'),
        ),
        migrations.AddIndex(
            model_name='productvariant',
            index=models.Index(fields=['sku'], name='product_pro_sku_bd7cbd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productvariant',
            unique_together={('product', 'color', 'size')},
        ),
        migrations.AlterUniqueTogether(
            name='wishlist',
            unique_together={('user', 'product', 'variant')},
        ),
    ]
